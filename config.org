
#+TITLE: Emacs Configuration
#+AUTHOR: Mark Smith

With HEAVY reliance on the original [[https://github.com/danielmai/.emacs.d.git][document]] by Daniel Mai.


I've been using Emacs on and off since the summer of 2014, and along the way I've become accustomed to many different tweaks for it.

This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is a fantastic way to manage package configurations.  

This file is written in org mode and takes advantage of org babel to strip away everything in the file except the emacs lisp surrounded by begin and end source tags. 

* Personal information

#+begin_src emacs-lisp
(setq user-full-name "Mark Smith"
      user-mail-address "markacsmith@gmail.com")
#+end_src

* Emacs init and tangling this file
** Init file

Init.el is always loaded by emacs.  Emacs expects elisp code at a minimum the following should be saved into a sepparate file and saved as init.el in the home directory ~\ or something similar to; C:\Users\xxxx\AppData\Roaming\.emacs.d on a windows machine.


;;; Set up package
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)

;;
;;
;; This is the critical part for a new install of emacs
;;
;;
;;; Bootstrap use-package
;; Install use-package if it's not already installed.
;; use-package is used to configure the rest of the packages.
;; The following was copied from the git repo
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; From use-package README

(eval-when-compile
  (require 'use-package))
(require 'diminish)                ;; if you use :diminish
(require 'bind-key)
;; (setq use-package-verbose t)
(server-start)

;;; Load the config
(org-babel-load-file (concat user-emacs-directory "config.org"))

** Save path for this file after org bable

The initialization file (above) is set up to pull all the elisp out of config.org (this file).

Set up the customize file to its own separate file, instead of saving customize settings in [[file:init.el][init.el]]

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Appearence
** Themes

I like a high contrast dark colour scheme, Cyber punk has a good contrasty
appearance they identify org mode as specially-tailored but not Python 
or Fortran.  The jury is out as yet.

*** Cyperpunk

The [[https://github.com/n3mo/cyberpunk-theme.el][cyberpunk theme]] is dark and colorful.

#+begin_src emacs-lisp
(use-package cyberpunk-theme
  :if (window-system)
  :ensure t
  :init
  (progn
    (load-theme 'cyberpunk t)))
#+end_src

*** Wheatgrass

A built-in dark theme with good contrast 

#+begin_src emacs-lisp
(use-package wheatgrass-theme
  :if (window-system)
  :ensure t
  :init
  (load-theme 'wheatgrass))
#+end_src

*** Convenient theme functions

#+begin_src emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)
#+end_src

** Faces (Font)
I prefer a san serif mono space font. It is easier on tired old eyes.  
The built in Lucida Console font works fine for me. A height of 143
corresponds to approximately 14 pt type.

The following was copied directly from a .emacs file created
by emacs after using the custimize faces menu

 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.

#+begin_src emacs-lisp  
(custom-set-faces
 '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil
			 :strike-through nil :overline nil :underline nil
			 :slant normal :weight normal :height 143 :width normal
			 :foundry "outline" :family "Lucida Console")))))
#+end_src

** Defaults

Customizations that will always be in effect such as start up frame size column mode on etc

#+begin_src emacs-lisp

(custom-set-variables
 
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 
 ;; I like to know what column I am in as well as the row number
 
 '(column-number-mode t)
  
 ;; With the 143 height text the default frame did not fit well on my 
 ;; 11" notebook screen therefore limit the height of the default frame.
 
 '(default-frame-alist (quote ((height . 27))))

 ;; delete the region when typing, just like as we expect nowadays.
 (delete-selection-mode t)


 ;; highlight the current line
 (global-visual-line-mode)
 (diminish 'visual-line-mode)


#+end_src

This is the auto generated elisp from the .emacs for wheatgrass.
 '(ansi-color-names-vector
   ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#e090d7" "#8cc4ff"
    "#eeeeec"])
 '(custom-enabled-themes (quote (tsdh-dark)))

* Default Behaviour

#+begin_src emacs-lisp

;; Save all backup files in one location
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

;; show the opposite paren when closing
(show-paren-mode t)
 
;; use shift arrow key to move from window to window when not in 
;; org mode
(windmove-default-keybindings)

;; delete the region when typing, just like as we expect nowadays.
(delete-selection-mode t)

;; To get the M-y immediately pulls up the kill ring behavior, 
;; you need to run M-x browse-kill-ring-default-keybindings. 
;; Or, to put this in .emacs
;; other kill ring behavior can be modified see
;; https://www.emacswiki.org/emacs/BrowseKillRing

(require 'browse-kill-ring)
(browse-kill-ring-default-keybindings)


#+end_src

* Packages

For any packages that are not built in

[[https://github.com/jwiegley/use-package][use-package]] will download the package from elpa/melpa 

** Auto Complete

[[https://github.com/auto-complete/auto-complete][Auto Completion]] for GNU Emacs

#+begin_src emacs-lisp
(use-package auto-complete
  :defer t
  :ensure t)
#+end_src

** company-jedi

[[https://github.com/syohex/emacs-company-jedi][company-mode]] completion back-end for Python [[https://github.com/davidhalter/jedi][JEDI]]

#+begin_src emacs-lisp
(use-package company-jedi
  :defer t
  :ensure t)
#+end_src
       
** elpy

[[https://elpy.readthedocs.io/en/latest/index.html][Emacs Python Development Environment]]

The following are required outside of emacs using python installer pip

Either of these:

  pip install rope
  pip install jedi

flake8 for code checks:

  pip install flake8

importmagic for automatic imports:

  pip install importmagic

and autopep8 for automatic PEP8 formatting:

  pip install autopep8

and yapf for code formatting:

  pip install yapf

#+begin_src emacs-lisp
(use-package elpy
  :defer t
  :ensure t)
#+end_src
** Flycheck-pyflakes

[[https://github.com/Wilfred/flycheck-pyflakes][flycheck-pyflakes]] provides support pyflakes in flycheck 


#+begin_src emacs-lisp
(use-package flycheck-pyflakes
  :defer t
  :ensure t)
#+end_src


** Fortran parser and browser

[[https://github.com/wence-/f90-iface][Interface Browser]] for parsing and browsing f90 files.

#+begin_src emacs-lisp
(use-package f90-interface-browser
  :defer t
  :ensure t)
#+end_src

** Fortpy

[[https://github.com/rosenbrockc/fortpy][Fortpy]] is a Fortran auto-completion for Emacs written in Python it can be installed with pip install fortpy

#+begin_src emacs-lisp
(use-package fortpy
  :defer t
  :ensure t)
#+end_src

** Highlighting

[[https://github.com/skeeto/cl-lib-highlight][CL-lib Highlighting]] adds all of the familiar highlighting to cl-lib macros that were originally provided for cl.

#+begin_src emacs-lisp
(use-package cl-lib-highlight
  :defer t
  :ensure t)
#+end_src

[[https://github.com/antonj/Highlight-Indentation-for-Emacs][highlight indentation]]  Provides two minor modes highlight-indentation-mode and highlight-indentation-current-column-mode

#+begin_src emacs-lisp
(use-package highlight-indentation
  :defer t
  :ensure t)
#+end_src

** Company Mode

[[http://company-mode.github.io/][Company Mode]] is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates.

#+begin_src emacs-lisp
(use-package company
  :defer t
  :ensure t)
#+end_src

** Concurrent

[[https://github.com/kiwanami/emacs-deferred/blob/master/README-concurrent.markdown][Concurrent]] is a higher level library for asynchronous tasks, based on deferred.el.

It is inspired by libraries of other environments and concurrent programing models. It has following facilities: pseud-thread, generator, semaphore, dataflow variables and event management.

#+begin_src emacs-lisp
(use-package concurrent
  :defer t
  :ensure t)
#+end_src

** ctable

[[https://github.com/kiwanami/emacs-ctable][ctable]] is a table component for emacs lisp. Emacs lisp programs can display a nice table view from an abstract data model. The many emacs programs have the code for displaying table views, such as dired, list-process, buffer-list and so on. So, ctable.el would provide functions and a table framework for the table views.

#+begin_src emacs-lisp
(use-package ctable
  :defer t
  :ensure t)
#+end_src

** dash

[[https://github.com/magnars/dash.el][dash]] a modern list api for emacs.  No cl required.

#+begin_src emacs-lisp
(use-package dash
  :defer t
  :ensure t)
#+end_src

** deferred 

[[https://github.com/kiwanami/emacs-deferred][deferred]]  Simple asynchronous functions for emacs lisp

#+begin_src emacs-lisp
(use-package deferred
  :defer t
  :ensure t)
#+end_src

** direx

[[https://github.com/m2ym/direx-el][direx]] Simple Directory Explorer

#+begin_src emacs-lisp
(use-package direx
  :defer t
  :ensure t)
#+end_src

** epc 

[[https://github.com/kiwanami/emacs-epc][epc]] This program is an asynchronous RPC stack for Emacs. Using this RPC stack, the Emacs can communicate with the peer process smoothly. Because the protocol employs S-expression encoding and consists of asynchronous communications, the RPC response is fairly good.

#+begin_src emacs-lisp
(use-package epc
  :defer t
  :ensure t)
#+end_src

** epl Emacs Package Library

[[https://github.com/cask/epl][epl]] EPL provides a convenient high-level API for various package.el versions, and aims to overcome its most striking idiocies.

#+begin_src emacs-lisp
(use-package epl
  :defer t
  :ensure t)
#+end_src

** ess Emacs Speaks Statistics

[[https://ess.r-project.org/][ess]] Emacs Speaks Statistics (ESS) is an add-on package for emacs text editors such as GNU Emacs and XEmacs. It is designed to support editing of scripts and interaction with various statistical analysis programs such as R, S-Plus, SAS, Stata and OpenBUGS/JAGS. Although all users of these statistical analysis programs are welcome to apply ESS, advanced users or professionals who regularly work with text-based statistical analysis scripts, with various statistical languages/programs, or with different operating systems might benefit from it the most.

#+begin_src emacs-lisp
(use-package ess
  :defer t
  :ensure t)
#+end_src

** f 

[[https://github.com/rejeep/f.el/tree/master/bin][f]] Modern API for working with files and directories

#+begin_src emacs-lisp
(use-package f
  :defer t
  :ensure t)
#+end_src

** Find File in Project

[[https://www.emacswiki.org/emacs/FindFileInProject][Find File In Project]] This library provides a couple methods for quickly finding any file in a given project. It depends on GNU find.

#+begin_src emacs-lisp
(use-package find-file-in-project
  :defer t
  :ensure t)
#+end_src
 
** Flycheck

[[http://www.flycheck.org/en/latest/][flycheck]] Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs, intended as replacement for the older Flymake extension which is part of GNU Emacs. 

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init(global-flycheck-mode))
#+end_src

[[https://github.com/purcell/flymake-easy][flymake-easy]] Helpers for easily building flymake checkers

#+begin_src emacs-lisp
(use-package flymake-easy
  :defer t
  :ensure t)
#+end_src

[[https://github.com/purcell/flymake-python-pyflakes][Flymake for Python]] An Emacs flymake handler for syntax-checking Python source code using pyflakes or flake8.

#+begin_src emacs-lisp
(use-package flymake-python-pyflakes
  :defer t
  :ensure t)
#+end_src

** jedi

  jedi               20160425.2156 installed             a Python auto-completion for Emacs
  jedi-core          20160501.2043 installed             Common code of jedi.el and company-jedi.el
  jedi-direx         20140310.236  installed             Tree style source code viewer for Python buffer
  julia-mode         20150912.800  installed             Major mode for editing Julia source code
  let-alist          1.0.4         installed             Easily let-bind values of an assoc-list by their names
  org-beautify-theme 20150106.956  installed             A sub-theme to make org-mode more beautiful.
  org-projectile     20160604.1110 installed             Repository todo management for org-mode
  pkg-info           20150517.443  installed             Information about packages
  popup              20151125.542  installed             Visual Popup User Interface
  pos-tip            20150318.813  installed             Show tooltip at point
  projectile         20160526.832  installed             Manage and navigate projects in Emacs easily
  pungi              20150222.446  installed             Integrates jedi with virtualenv and buildout python environments
  python-environment 20150310.153  installed             virtualenv API for Emacs Lisp
  python-mode        20151210.918  installed             Python major mode
  pythonic           20150730.216  installed             Utility functions for writing pythonic emacs package.
  pyvenv             20151105.1519 installed             Python virtual environment interface
  r-autoyas          20140101.710  installed             Provides automatically created yasnippets for R function argument lists.
  s                  20150924.406  installed             The long lost Emacs string manipulation library.
  seq                20151121.1017 installed             Sequence manipulation functions
  smartparens        20151213.811  installed             Automatic insertion, wrapping and paredit-like navigation with user defined pairs.
  swiper             20151212.41   installed             Isearch with an overview. Oh, man!
  virtualenv         20140220.1501 installed             Virtualenv for Python
  yasnippet          20151212.2133 installed             Yet another snippet extension for Emacs.





 '(global-auto-complete-mode t)
 '(ido-mode (quote both) nil (ido))
  '(package-archives
   (quote
    (("gnu" . "http://elpa.gnu.org/packages/")
     ("melpa" . "http://melpa.org/packages/")))))
(custom-set-faces
 ;;
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 ;;
 '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil
			 :strike-through nil :overline nil :underline nil
			 :slant normal :weight normal :height 143 :width normal
			 :foundry "outline" :family "Lucida Console")))))
 ;;
 ;;
 ;;
 ;; Org Mode Modifications
 ;;
 ;;
 ;;Require org mode on start up
(require 'org)
 ;; add keybidings for org capture
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(global-set-key (kbd "<f9> I") 'bh/punch-in)
(global-set-key (kbd "<f9> O") 'bh/punch-out)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)
;;
;;
;; add todo sequencing
;; The pipe | separates the todo state from the completed state
;; letters in brackets are the shortcuts to each state
;; delegated @ requires a note on switching to delegated /! records time stamp
;; when switching to a state that does not record  a time stamp
;;
;;
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "DELEGATED(l@/!)" "|"
		  "DONE(d)" "DEFERED(f)")))
;;
;; Switching to a done state logs time and opens note buffer
;;
(setq org-log-done 'time)
(setq org-log-done 'note)
;;
;; create the global set of tags to be used in all .org files
;; tag and short cut
;;
(setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("@my_pc" . ?p)))


;;
;;
;; Targets include file where refile command initiated
;; and any file contributing to the agenda - up to 9 levels deep
;;
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))
;;
;; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))
(setq org-refile-use-outline-path 'file)
;;
; Use IDO for both buffer and file completion and ido-everywhere to t
(setq org-completion-use-ido t)
(setq ido-everywhere t)
(setq ido-max-directory-size 100000)
(ido-mode (quote both))
; Use the current window when visiting files and buffers with ido
(setq ido-default-file-method 'selected-window)
(setq ido-default-buffer-method 'selected-window)
; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)
;;
;;
;; org mode custom agendas
;;
(setq org-agenda-custom-commands
      '(("D" "Daily rotine" ;; Press to choose ad name
	 ;; review upcoming deadlines and appointments
         ((agenda "" ((org-agenda-ndays 1)))
	  ;;
	   (tags "REFILE"
                      ((org-agenda-overriding-header "Tasks to Refile")
                       (org-tags-match-list-sublevels nil)))
	  ;;
	  ;;review all next items
          (todo "NEXT")))))
;;
;;
;;
;; Python related modifications
;;
;;
;;
;; Set IPython to be the default Python Shell
(setq python-shell-interpreter "ipython"
       python-shell-interpreter-args "-i")
(elpy-enable)

list of all packages installed on notebook
  auto-complete      20151211.227  installed             Auto Completion for GNU Emacs
  cl-lib-highlight   20140127.1312 installed             full cl-lib font-lock highlighting
  company            20151208.1341 installed             Modular text completion framework
  company-jedi       20151216.1921 installed             company-mode completion back-end for Python JEDI
  concurrent         20150309.2052 installed             Concurrent utility functions for emacs lisp
  ctable             20140304.1659 installed             Table component for Emacs Lisp
  dash               20151021.113  installed             A modern list library for Emacs
  deferred           20151007.1657 installed             Simple asynchronous functions for emacs lisp
  direx              20151023.1606 installed             Simple Directory Explorer
  elpy               20151101.401  installed             Emacs Python Development Environment
  epc                20140609.2234 installed             A RPC stack for the Emacs Lisp
  epl                20150517.433  installed             Emacs Package Library
  ess                20151210.52   installed             Emacs Speaks Statistics
  f                  20151113.123  installed             Modern API for working with files and directories
  f90-interface-b... 1.1           installed             Parse and browse f90 interfaces
  find-file-in-pr... 20151208.2241 installed             Find files in a project quickly, on any OS
  flycheck           20151212.411  installed             On-the-fly syntax checking
  flycheck-pyflakes  20140630.1521 installed             Support pyflakes in flycheck
  flymake-easy       20140818.55   installed             Helpers for easily building flymake checkers
  flymake-python-... 20131127.6    installed             A flymake handler for python-mode files using pyflakes (or flake8)
  fortpy             20150715.1332 installed             a Fortran auto-completion for Emacs
  highlight-inden... 20150307.208  installed             Minor modes for highlighting indentation
  jedi               20160425.2156 installed             a Python auto-completion for Emacs
  jedi-core          20160501.2043 installed             Common code of jedi.el and company-jedi.el
  jedi-direx         20140310.236  installed             Tree style source code viewer for Python buffer
  julia-mode         20150912.800  installed             Major mode for editing Julia source code
  let-alist          1.0.4         installed             Easily let-bind values of an assoc-list by their names
  org-beautify-theme 20150106.956  installed             A sub-theme to make org-mode more beautiful.
  org-projectile     20160604.1110 installed             Repository todo management for org-mode
  pkg-info           20150517.443  installed             Information about packages
  popup              20151125.542  installed             Visual Popup User Interface
  pos-tip            20150318.813  installed             Show tooltip at point
  projectile         20160526.832  installed             Manage and navigate projects in Emacs easily
  pungi              20150222.446  installed             Integrates jedi with virtualenv and buildout python environments
  python-environment 20150310.153  installed             virtualenv API for Emacs Lisp
  python-mode        20151210.918  installed             Python major mode
  pythonic           20150730.216  installed             Utility functions for writing pythonic emacs package.
  pyvenv             20151105.1519 installed             Python virtual environment interface
  r-autoyas          20140101.710  installed             Provides automatically created yasnippets for R function argument lists.
  s                  20150924.406  installed             The long lost Emacs string manipulation library.
  seq                20151121.1017 installed             Sequence manipulation functions
  smartparens        20151213.811  installed             Automatic insertion, wrapping and paredit-like navigation with user defined pairs.
  swiper             20151212.41   installed             Isearch with an overview. Oh, man!
  virtualenv         20140220.1501 installed             Virtualenv for Python
  yasnippet          20151212.2133 installed             Yet another snippet extension for Emacs.

* Org Mode

[[http://orgmode.org/][Live Life in Plain Text with Org Mode]] 

** Org Mode Directory and files

Set the path to the Dropbox folder

#+begin_src emacs-lisp

;; add a directory path to this list to use org files

(setq org-directory 
      (car   
          (delq nil
             (mapcar (lambda(x) (and (file-directory-p x) x))
                           '("c:/Users/marka/Dropbox/Apps/OrgMode"
                             "c:/Users/Mark/Dropbox/Apps/OrgMode"
                             "c:/Users/msmith/Dropbox/Apps/OrgMode")))))

;; car pulls the first item of a list which in this case is the only elemant
;; in the list without car the result is of type cons, and does not concat
;; properly below 

(setq org-agenda-files
    (delq nil
        (mapcar (lambda(y) (and (file-exists-p y) y))
            (list
                (concat org-directory "/gtd_work.org")
                (concat org-directory "/gtd_proging.org")
                (concat org-directory "/gtd_home.org")
                (concat org-directory "/DailyRoutine.org")))


(setq org-default-notes-file (concat org-directory "/refile.org"))

;; Capture mode -  C-c c to start

;; code source 
;; Org Mode Organize your life in plain text
;; by Bernt Hansen


;; modified, some templates removed.
;;
;;
;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings
;; and org-protocol
;;
(setq org-capture-templates
      (quote (("t" "todo"
	        entry (file (concat org-directory"/refile.org")
                "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond"
	        entry (file (concat org-directory"/refile.org"))
                "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n"
	       :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note"
	        entry (file (concat org-directory"/refile.org"))
                "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)            
              ("m" "Meeting"
	        entry (file (concat org-directory"/refile.org"))
                "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call"
	        entry (file (concat org-directory"refile.org"))
                "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit"
	        entry (file (concat org-directory"/refile.org"))
                "* NEXT %?\n%U\n%a\n
                SCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")
                \n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE:
                NEXT\n:END:\n"))))


#+end_src
** Org Keybindings

#+begin_src emacs-lisp

(global-set-key "\C-cc" 'org-capture)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

;; Clock in and Clock out from anywhere

(global-set-key (kbd "<f9> I") 'bh/punch-in)
(global-set-key (kbd "<f9> O") 'bh/punch-out)

#+end_src

** Org babel languages

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (calc . t)
   (latex . t)
   (lisp . t)
   (sh . t)
   (sqlite . t)
   (F90 . t)
   (R . t)
  ))

;; Running code on your machine always comes with a security risk. Badly 
;; written or malicious code can be executed on purpose or by accident. Org 
;; has default settings which will only evaluate such code if you give 
;; explicit permission to do so, and as a casual user of these features you 
;; should leave these precautions intact.  Uncomment below to stop the 
;; confirm requirements

;;(defun my-org-confirm-babel-evaluate (lang body)
;;  "Do not confirm evaluation for these languages."
;;  (not (or (string= lang "python")
;;           (string= lang "emacs-lisp")
;;           (string= lang "sqlite"))))
;;(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

** Org babel/source blocks

I like to have source blocks properly syntax highlighted and with the
editing popup window staying within the same window so all the windows
don't jump around. Also, having the top and bottom trailing lines in
the block is a waste of space, so we can remove them.

I noticed that fontification doesn't work with markdown mode when the
block is indented after editing it in the org src buffer---the leading
#s for headers don't get fontified properly because they appear as Org
comments. Setting ~org-src-preserve-indentation~ makes things
consistent as it doesn't pad source blocks with leading spaces.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+end_src
