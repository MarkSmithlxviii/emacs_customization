#+TITLE: Emacs Configuration
#+AUTHOR: Mark Smith

With HEAVY reliance on the original [[https://github.com/danielmai/.emacs.d.git][document]] by Daniel Mai.


I've been using Emacs on and off since the summer of 2014, and along
the way I've become accustomed to many different tweaks for it.

This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is
a fantastic way to manage package configurations.  

This file is written in org modeand takes advantage of org babel to strip away 
everythin in the file except the emacs lisp surrounded by begin and end source tags. 

* Personal information

#+begin_src emacs-lisp
(setq user-full-name "Mark Smith"
      user-mail-address "markacsmith@gmail.com")
#+end_src

* Emacs init and tangling this file
** Init file

Init.el is always loaded by emacs.  Emacs expects elisp code at a
minimum the following should be saved into a sepparate file and
saved as init.el in the home directory ~\ or something similar to; 
C:\Users\Mark\AppData\Roaming\.emacs.d


;;; Set up package
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)

;;
;;
;; This is the critical part for a new install of emacs
;;
;;
;;; Bootstrap use-package
;; Install use-package if it's not already installed.
;; use-package is used to configure the rest of the packages.
;; The following was copied from the git repo
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; From use-package README
(eval-when-compile
  (require 'use-package))
(require 'diminish)                ;; if you use :diminish
(require 'bind-key)
;; (setq use-package-verbose t)
(server-start)

;;; Load the config
(org-babel-load-file (concat user-emacs-directory "config.org"))

** Save path for this file after org bable

The initialization file (above) is set up to pull all the elisp out of 
config.org (this file)

Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]]

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

* Appearence
** Themes

I like a high contrast dark colour scheme, Cyber punk has a good contrasty
appearance they identify org mode as specially-tailored but not Python 
or Fortran.  The jury is out as yet.

*** Cyperpunk

The [[https://github.com/n3mo/cyberpunk-theme.el][cyberpunk theme]] is dark and colorful.

#+begin_src emacs-lisp
(use-package cyberpunk-theme
  :if (window-system)
  :ensure t
  :init
  (progn
    (load-theme 'cyberpunk t)))
#+end_src

*** Wheatgrass

A built-in dark theme with good contrast 

#+begin_src emacs-lisp
(use-package wheatgrass-theme
  :if (window-system)
  :ensure t
  :init
  (load-theme 'wheatgrass))
#+end_src

*** Convenient theme functions

#+begin_src emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)
#+end_src

** Faces (Font)
I prefer a san serif mono space font. It is easier on tired old eyes.  
The built in Lucida Console font works fine for me. A height of 143
corresponds to approximately 14 pt type.

The following was copied directly from a .emacs file created
by emacs after using the custimize faces menu

 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.

#+begin_src emacs-lisp  
(custom-set-faces
 '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil
			 :strike-through nil :overline nil :underline nil
			 :slant normal :weight normal :height 143 :width normal
			 :foundry "outline" :family "Lucida Console")))))
#+end_src

** Defaults

Customizations that will always be in effect such as start up frame size
column mode on etc

#+begin_src emacs-lisp

(custom-set-variables
 
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 
 ;; I like to know what column I am in as well as the row number
 
 '(column-number-mode t)
  
 ;; With the 143 height text the default frame did not fit well on my 
 ;; 11" notebook screen therefore limit the height of the default frame.
 
 '(default-frame-alist (quote ((height . 27))))

 ;; delete the region when typing, just like as we expect nowadays.
 (delete-selection-mode t)


 ;; highlight the current line
 (global-visual-line-mode)
 (diminish 'visual-line-mode)


#+end_src

This is the auto generated elisp from the .emacs for wheatgrass.
 '(ansi-color-names-vector
   ["#212526" "#ff4b4b" "#b4fa70" "#fce94f" "#729fcf" "#e090d7" "#8cc4ff"
    "#eeeeec"])
 '(custom-enabled-themes (quote (tsdh-dark)))


* Default Behaviour

#+begin_src emacs-lisp

 ;; show the opposite paren when closing
 (show-paren-mode t)
 
 ;; use shift arrow key to move from windo to window when not in 
 ;; org mode
 (windmove-default-keybindings)

 ;; delete the region when typing, just like as we expect nowadays.
 (delete-selection-mode t)


#+end_src


* Packages

#+begin_src emacs-lisp

#+end_src


 '(global-auto-complete-mode t)
 '(ido-mode (quote both) nil (ido))
 '(org-agenda-files
   (quote
    ("c:/Users/marka/Dropbox/Apps/OrgMode/gtd_work.org"
     "c:/Users/marka/Dropbox/Apps/OrgMode/gtd_proging.org"
     "c:/Users/marka/Dropbox/Apps/OrgMode/gtd_home.org"
     "c:/Users/marka/Dropbox/Apps/OrgMode/DailyRoutine.org")))
 '(package-archives
   (quote
    (("gnu" . "http://elpa.gnu.org/packages/")
     ("melpa" . "http://melpa.org/packages/")))))
(custom-set-faces
 ;;
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 ;;
 '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil
			 :strike-through nil :overline nil :underline nil
			 :slant normal :weight normal :height 143 :width normal
			 :foundry "outline" :family "Lucida Console")))))
 ;;
 ;;
 ;;
 ;; Org Mode Modifications
 ;;
 ;;
 ;;Require org mode on start up
(require 'org)
 ;; add keybidings for org capture
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(global-set-key (kbd "<f9> I") 'bh/punch-in)
(global-set-key (kbd "<f9> O") 'bh/punch-out)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)
;;
;;
;; add todo sequencing
;; The pipe | separates the todo state from the completed state
;; letters in brackets are the shortcuts to each state
;; delegated @ requires a note on switching to delegated /! records time stamp
;; when switching to a state that does not record  a time stamp
;;
;;
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "DELEGATED(l@/!)" "|"
		  "DONE(d)" "DEFERED(f)")))
;;
;; Switching to a done state logs time and opens note buffer
;;
(setq org-log-done 'time)
(setq org-log-done 'note)
;;
;; create the global set of tags to be used in all .org files
;; tag and short cut
;;
(setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("@my_pc" . ?p)))
;;
;;
(setq org-directory "C:/Users/marka/Dropbox/Apps/OrgMode")
(setq org-default-notes-file "C:/Users/marka/Dropbox/Apps/OrgMode/refile.org")
;;
;; C-c c to start capture mode
;; code source Org Mode Organize your life in plain text
;; by Bernt Hansen
;;
;; modified some templates removed
;;
;;
;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings
;; and org-protocol
;;
(setq org-capture-templates
      (quote (("t" "todo"
	        entry (file "C:/Users/marka/Dropbox/Apps/OrgMode/refile.org")
                "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond"
	        entry (file "C:/Users/marka/Dropbox/Apps/OrgMode/refile.org")
                "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n"
	       :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note"
	        entry (file "C:/Users/marka/Dropbox/Apps/OrgMode/refile.org")
                "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)            
              ("m" "Meeting"
	        entry (file "C:/Users/marka/Dropbox/Apps/OrgMode/refile.org")
                "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call"
	        entry (file "C:/Users/marka/Dropbox/Apps/OrgMode/refile.org")
                "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit"
	        entry (file "C:/Users/marka/Dropbox/Apps/OrgMode/refile.org")
                "* NEXT %?\n%U\n%a\n
                SCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")
                \n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE:
                NEXT\n:END:\n"))))
;;
;;
;; Targets include file where refile command initiated
;; and any file contributing to the agenda - up to 9 levels deep
;;
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))
;;
;; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))
(setq org-refile-use-outline-path 'file)
;;
; Use IDO for both buffer and file completion and ido-everywhere to t
(setq org-completion-use-ido t)
(setq ido-everywhere t)
(setq ido-max-directory-size 100000)
(ido-mode (quote both))
; Use the current window when visiting files and buffers with ido
(setq ido-default-file-method 'selected-window)
(setq ido-default-buffer-method 'selected-window)
; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)
;;
;;
;; org mode custom agendas
;;
(setq org-agenda-custom-commands
      '(("D" "Daily rotine" ;; Press to choose ad name
	 ;; review upcoming deadlines and appointments
         ((agenda "" ((org-agenda-ndays 1)))
	  ;;
	   (tags "REFILE"
                      ((org-agenda-overriding-header "Tasks to Refile")
                       (org-tags-match-list-sublevels nil)))
	  ;;
	  ;;review all next items
          (todo "NEXT")))))
;;
;;
;;
;; Python related modifications
;;
;;
;;
;; Set IPython to be the default Python Shell
(setq python-shell-interpreter "ipython"
       python-shell-interpreter-args "-i")
(elpy-enable)

* Org Mode
** Org Mode Files

Set the path to the Dropbox folder
#+begin_src emacs-lisp

#+end_src
